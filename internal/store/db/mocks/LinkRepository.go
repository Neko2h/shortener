// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Neko2h/shortener/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// LinkRepository is an autogenerated mock type for the LinkRepository type
type LinkRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *LinkRepository) Get(_a0 context.Context, _a1 string) (*entity.LinkDB, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.LinkDB
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.LinkDB); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.LinkDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: _a0, _a1
func (_m *LinkRepository) New(_a0 context.Context, _a1 *entity.LinkDB) (*entity.LinkDB, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.LinkDB
	if rf, ok := ret.Get(0).(func(context.Context, *entity.LinkDB) *entity.LinkDB); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.LinkDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.LinkDB) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewLinkRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewLinkRepository creates a new instance of LinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLinkRepository(t NewLinkRepositoryT) *LinkRepository {
	mock := &LinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
